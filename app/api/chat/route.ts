import { NextRequest, NextResponse } from 'next/server';

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

export async function POST(req: NextRequest) {
  console.log("[API /chat] Received POST request."); // LOG
  try {
    const body = await req.json();
    
    // Validaci√≥n b√°sica del cuerpo de la solicitud
    if (!body || typeof body !== 'object') {
      return NextResponse.json({ error: 'Cuerpo de solicitud inv√°lido.' }, { status: 400 });
    }
    
    // LOG: Log the entire received request body (solo longitudes para seguridad)
    console.log("[API /chat] Received request body keys:", Object.keys(body));
    console.log("[API /chat] Messages array length:", Array.isArray(body.messages) ? body.messages.length : 'not array');

    const userMessages = body.messages; 
    const pdfText = body.attachedPdfText;
    const hasPDFFlag = body.hasPDF === true;
    const customSystemPrompt = body.systemPrompt;
    
    // Validaci√≥n de tama√±o de PDF text para prevenir ataques DoS
    if (pdfText && typeof pdfText === 'string' && pdfText.length > 1000000) { // 1MB l√≠mite
      return NextResponse.json({ error: 'Texto de PDF demasiado grande (m√°ximo 1MB).' }, { status: 400 });
    }
    
    // LOG: Log the extracted pdfText specifically
    console.log(`[API /chat] Extracted pdfText type: ${typeof pdfText}, length: ${pdfText?.length || 0}`);
    console.log(`[API /chat] Has PDF Flag: ${hasPDFFlag}`);
    console.log("[API /chat] Extracted pdfText (first 100 chars):", pdfText ? pdfText.substring(0, 100) + "..." : "null or empty");

    if (!userMessages || !Array.isArray(userMessages)) {
        console.error("[API /chat] Invalid message format in request body."); // LOG
        return NextResponse.json({ error: 'Formato de mensajes inv√°lido.' }, { status: 400 });
    }
    
    // Validar cada mensaje
    for (let i = 0; i < userMessages.length; i++) {
      const msg = userMessages[i];
      if (!msg || typeof msg !== 'object' || typeof msg.content !== 'string') {
        return NextResponse.json({ error: `Mensaje ${i} tiene formato inv√°lido.` }, { status: 400 });
      }
      
      // Limitar longitud de mensajes individuales
      if (msg.content.length > 50000) { // 50KB por mensaje
        return NextResponse.json({ error: `Mensaje ${i} es demasiado largo (m√°ximo 50KB).` }, { status: 400 });
      }
      
      // Sanitizar contenido b√°sico (prevenir inyecciones)
      if (msg.content.includes('<script>') || msg.content.includes('javascript:')) {
        return NextResponse.json({ error: 'Contenido potencialmente malicioso detectado.' }, { status: 400 });
      }
    }
    
    // Limitar n√∫mero total de mensajes
    if (userMessages.length > 100) {
      return NextResponse.json({ error: 'Demasiados mensajes en la conversaci√≥n (m√°ximo 100).' }, { status: 400 });
    }

    let fullPromptContext = "";
    const lastUserMessage = userMessages.slice(-1)[0]?.content || ""; 
    
    // Verificar si hay texto de PDF, ya sea como adjunto, con la bandera, o incluido en el mensaje
    const hasPDF = hasPDFFlag || 
                  (pdfText && typeof pdfText === 'string' && pdfText.trim().length > 0) || 
                  lastUserMessage.includes("CONTENIDO DEL PDF ADJUNTO") ||
                  lastUserMessage.includes("An√°lisis del PDF adjunto") ||
                  (lastUserMessage.length > 1000); // Si el mensaje es muy largo, probablemente contiene un PDF
    
    console.log(`[API /chat] Has PDF? ${hasPDF}, Message length: ${lastUserMessage.length}`);

    if (pdfText && typeof pdfText === 'string' && pdfText.trim().length > 0) {
      console.log("[API /chat] Appending PDF text to AI context..."); // LOG
      fullPromptContext += `Contexto del Documento PDF Adjunto:\n---\n${pdfText}\n---\n\n`;
    } else {
       console.log("[API /chat] No valid PDF text found in request body. Not adding to context."); // LOG
    }

    fullPromptContext += `Consulta del Usuario:\n${lastUserMessage}`;

    // LOG: Log the final context/prompt being sent to the AI model
    console.log("[API /chat] Final context/prompt for AI (first 300 chars):", fullPromptContext.substring(0, 300));

    // *** Llama a OpenAI ***
    if (!OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY no est√° configurada');
    }

    const openaiResponse = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: customSystemPrompt || `Eres Lexi, un asistente legal especializado en derecho paname√±o. Tu funci√≥n es proporcionar respuestas jur√≠dicas claras, basadas en la ley paname√±a vigente, siempre citando art√≠culos, c√≥digos o normativas aplicables.

üìã Reglas generales

Citas legales: En toda respuesta legal debes incluir:
- Referencia exacta (c√≥digo, ley, art√≠culo y numeral)
- Explicaci√≥n clara en lenguaje sencillo

Tiempo de actuaci√≥n:
Siempre que la consulta tenga un plazo o t√©rmino legal (ej. interponer recurso, contestar demanda, presentar pruebas, etc.), debes especificar:
- Cu√°ntos d√≠as tiene la parte para actuar
- Qu√© pasa si no lo hace dentro del plazo

Perspectivas de las partes:
- Indica qu√© puede hacer el querellante/demandante
- Indica qu√© puede hacer la defensa/demandado

Estilo de respuesta:
- Formal, claro y en espa√±ol neutro
- Usa vi√±etas o numeraci√≥n para organizar las acciones posibles
- Ofrece un resumen final pr√°ctico ("En resumen, debe presentar el recurso en X d√≠as‚Ä¶")

üéØ Estructura de respuesta esperada:

üìñ Fundamento legal: [Cita exacta del c√≥digo/ley/art√≠culo]
‚è≥ Tiempo de actuaci√≥n: [Plazos espec√≠ficos y consecuencias]
‚öñÔ∏è Acciones posibles:
  Querellante/Demandante: [Opciones disponibles]
  Defensa/Demandado: [Opciones de defensa]
‚úÖ Resumen pr√°ctico: [Recomendaci√≥n concreta]

Conocimiento especializado en:
- C√≥digo Civil de Panam√°
- C√≥digo de Trabajo
- C√≥digo de Comercio  
- C√≥digo Judicial
- Constituci√≥n Pol√≠tica de Panam√°
- Jurisprudencia de la Corte Suprema de Justicia
- Legislaci√≥n comercial, laboral, civil, penal y administrativa

IMPORTANTE: Mant√©n la confidencialidad y proporciona informaci√≥n general, no asesor√≠a legal espec√≠fica. Si no est√°s seguro de algo espec√≠fico del derecho paname√±o, ind√≠calo claramente.`
          },
          {
            role: 'user',
            content: fullPromptContext
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      }),
    });

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.json().catch(() => ({}));
      throw new Error(`Error de OpenAI: ${openaiResponse.status} - ${errorData.error?.message || openaiResponse.statusText}`);
    }

    const openaiData = await openaiResponse.json();
    
    if (!openaiData.choices || openaiData.choices.length === 0) {
      throw new Error('No se recibi√≥ respuesta del modelo');
    }

    const content = openaiData.choices[0].message.content;
    
    // Adaptar la respuesta seg√∫n si se detect√≥ un PDF o no
    /*
    const aiResponse = { 
        assistantResponse: hasPDF
          ? `He analizado el documento que has proporcionado y puedo ofrecerte el siguiente an√°lisis legal:

**An√°lisis del Caso**

El caso presenta una situaci√≥n contractual interesante desde el punto de vista jur√≠dico. Seg√∫n la documentaci√≥n analizada, identifico los siguientes aspectos clave:

1. Existe un posible incumplimiento contractual por parte de una de las partes.
2. Las cl√°usulas espec√≠ficas del contrato establecen plazos determinados que podr√≠an ser relevantes para la resoluci√≥n.
3. Hay elementos que podr√≠an constituir fuerza mayor seg√∫n la normativa paname√±a.

**Marco Legal Aplicable**

En Panam√°, este tipo de situaciones est√°n reguladas principalmente por:
- El C√≥digo Civil, especialmente los art√≠culos relacionados con obligaciones contractuales
- Jurisprudencia relevante sobre incumplimiento y fuerza mayor
- Normativas espec√≠ficas del sector (si aplica)

**Recomendaciones**

Basado en mi an√°lisis, recomendar√≠a las siguientes acciones:
1. Revisar detalladamente las cl√°usulas de resoluci√≥n de conflictos del contrato
2. Documentar todas las comunicaciones relevantes entre las partes
3. Considerar la posibilidad de una mediaci√≥n o arbitraje antes de proceder a v√≠as judiciales

Si necesitas profundizar en alg√∫n aspecto espec√≠fico del an√°lisis, no dudes en preguntar.`
          : `He recibido tu consulta sobre: "${lastUserMessage.substring(0, 100)}${lastUserMessage.length > 100 ? '...' : ''}"

Para poder proporcionarte un an√°lisis legal completo, necesitar√≠a m√°s informaci√≥n sobre el caso. Si tienes documentos relacionados (contratos, resoluciones, etc.), te recomendar√≠a adjuntarlos para un an√°lisis m√°s preciso.

No obstante, basado en la informaci√≥n proporcionada, puedo ofrecerte estas consideraciones generales:

1. En asuntos contractuales, es importante revisar las cl√°usulas espec√≠ficas y el contexto de la relaci√≥n entre las partes.
2. La legislaci√≥n paname√±a establece plazos y procedimientos espec√≠ficos que deben ser considerados.
3. Existen mecanismos alternativos de resoluci√≥n de conflictos que podr√≠an ser aplicables.

Si puedes proporcionar m√°s detalles o documentaci√≥n sobre tu caso, podr√© ofrecerte un an√°lisis m√°s completo y personalizado.`
    };
    console.log("[API /chat] Simulated AI response generated."); // LOG
    */

    const aiResponse = {
      content: content,
      sources: []
    };

    // LOG: Log the response being sent back to the client
    console.log("[API /chat] Sending response back to client");
    return NextResponse.json(aiResponse, { status: 200 });

  } catch (error: any) {
    console.error("[API /chat] Error processing AI request:", error); // LOG
    return NextResponse.json(
      { error: "Error al procesar la solicitud con la IA.", details: error.message },
      { status: 500 }
    );
  }
} 