import React, { useState, useEffect, useRef } from 'react';
import ChatMessage from './ChatMessage';
import ChatInput from './ChatInput';
import { supabase } from '../supabaseClient';
import { useAuth } from '../src/contexts/AuthContext';
import { generateCompletion } from '../utils/openai'; // Assuming OpenAI utility exists

const ChatInterface = () => {
  const { user } = useAuth();
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingHistory, setIsLoadingHistory] = useState(true); // State for loading history
  const [error, setError] = useState(null);
  // const [sessionId, setSessionId] = useState(null); // We might not need explicit session ID for now if loading all user messages
  const messagesEndRef = useRef(null);

  // Function to scroll to the bottom of messages
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // Load message history for the logged-in user
  useEffect(() => {
    const loadHistory = async () => {
      if (!user) {
        setMessages([]); // Clear messages if no user
        setIsLoadingHistory(false);
        return;
      }

      setIsLoadingHistory(true);
      setError(null);
      try {
        const { data, error: fetchError } = await supabase
          .from('chat_messages')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: true }); // Load in chronological order

        if (fetchError) {
          throw new Error(`Error cargando historial: ${fetchError.message}`);
        }

        if (data && data.length > 0) {
          setMessages(data);
        } else {
          // Start with initial assistant message if no history
          setMessages([
            {
              id: 'initial',
              role: 'assistant',
              content: 'Hola! Soy tu asistente legal. ¿En qué puedo ayudarte hoy?',
              created_at: new Date().toISOString(),
              user_id: user.id, // Assign to user for consistency, though it's assistant
              // session_id: null, // Decide on session strategy if needed
            },
          ]);
        }
      } catch (err) {
        console.error('Failed to load chat history:', err);
        setError(`Error al cargar el historial: ${err.message}`);
        setMessages([ // Fallback initial message on error
          { id: 'error-initial', role: 'assistant', content: 'Error al cargar historial. ¿Cómo puedo ayudarte?', created_at: new Date().toISOString() }
        ]);
      } finally {
        setIsLoadingHistory(false);
      }
    };

    loadHistory();
  }, [user]); // Reload history when user changes

  // Scroll to bottom when new messages arrive or history loads
  useEffect(() => {
    if (!isLoadingHistory) { // Only scroll after history is loaded
      scrollToBottom();
    }
  }, [messages, isLoadingHistory]);

  // Function to handle sending a message
  const handleSendMessage = async (inputText) => {
    if (!user) { // Removed sessionId check for now
      setError('Error: Usuario no autenticado.');
      return;
    }

    const userMessage = {
      // id is generated by DB now, no need for client-side UUID
      role: 'user',
      content: inputText,
      created_at: new Date().toISOString(), // Keep for immediate display
      user_id: user.id,
      // session_id: sessionId, // Add back if using specific sessions
    };

    // Optimistically add user message to UI
    setMessages((prevMessages) => [...prevMessages, { ...userMessage, id: `temp-${crypto.randomUUID()}` }]); // Use temporary ID for key
    setIsLoading(true);
    setError(null);

    // Prepare message history for OpenAI
    const historyForAI = messages.map(msg => ({ role: msg.role, content: msg.content }));
    historyForAI.push({ role: 'user', content: inputText }); // Add the new user message

    // Limit history length if necessary (e.g., last 10 messages) to avoid large payloads
    // const limitedHistory = historyForAI.slice(-10); 

    try {
      // 1. Save user message to Supabase (get the real ID back)
      const { data: savedUserMessage, error: insertError } = await supabase
        .from('chat_messages')
        .insert({
            role: userMessage.role,
            content: userMessage.content,
            user_id: userMessage.user_id,
            // session_id: userMessage.session_id, // Add back if using sessions
        })
        .select()
        .single();

      if (insertError) {
        throw new Error(`Error guardando tu mensaje: ${insertError.message}`);
      }

      // Update the temporary user message with the real ID from DB
      setMessages((prevMessages) => 
         prevMessages.map(msg => 
             msg.id === `temp-${userMessage.id}` ? { ...savedUserMessage } : msg
         )
      );

      // 2. Get assistant response using history
      const assistantResponseContent = await generateCompletion(historyForAI); // Pass history

      if (!assistantResponseContent) {
        throw new Error('No se pudo obtener respuesta del asistente.');
      }

      const assistantMessageData = {
        role: 'assistant',
        content: assistantResponseContent,
        user_id: user.id, // Still associate with the user for RLS
        // session_id: sessionId, // Add back if using sessions
      };

      // 3. Save assistant message to Supabase
      const { data: savedAssistantMessage, error: assistantInsertError } = await supabase
        .from('chat_messages')
        .insert(assistantMessageData)
        .select()
        .single();

      if (assistantInsertError) {
        console.error('Error saving assistant message:', assistantInsertError.message);
        // Even if saving fails, show response to user
         setMessages((prevMessages) => [...prevMessages, { ...assistantMessageData, id: `temp-assistant-${crypto.randomUUID()}` }]);
      } else {
         setMessages((prevMessages) => [...prevMessages, savedAssistantMessage]);
      }

    } catch (err) {
      console.error('Error handling message:', err);
      setError(`Error: ${err.message}. Intenta de nuevo.`);
      // Revert optimistic UI update if saving user message failed
      // setMessages((prevMessages) => prevMessages.filter(msg => msg.id !== `temp-${userMessage.id}`));
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-[600px] bg-white rounded-lg shadow-md overflow-hidden border border-gray-200">
      {/* Message Display Area */}
      <div className="flex-grow p-4 overflow-y-auto space-y-4 bg-gray-50">
        {isLoadingHistory ? (
            <div className="flex justify-center items-center h-full text-gray-500">Cargando historial...</div>
        ) : (
          messages.map((msg) => (
            <ChatMessage key={msg.id} message={msg} />
          ))
        )}
        {/* Ref to scroll to */}
        <div ref={messagesEndRef} />
      </div>

      {/* Error Display */}
      {error && (
        <div className="p-2 bg-red-100 text-red-700 text-sm text-center">
          {error}
        </div>
      )}

      {/* Input Area */}
      <ChatInput onSendMessage={handleSendMessage} isLoading={isLoading} />
    </div>
  );
};

export default ChatInterface; 